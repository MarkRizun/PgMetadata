Object subclass: #PgExtractor	instanceVariableNames: 'database connection data'	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgExtractor commentStamp: 'OlivierAuverlot 6/8/2017 13:55' prior: 0!I'm the abstract class to define the object extractors!!PgExtractor methodsFor: 'converting' stamp: 'OlivierAuverlot 6/9/2017 10:25'!toBoolean: aYesNoValue	^aYesNoValue = 'YES'	! !!PgExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/8/2017 14:33'!sqlRequest	self subclassResponsibility ! !!PgExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 6/8/2017 15:38'!runSQL	^self connection execute: (self sqlRequest)! !!PgExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 6/9/2017 10:12'!runSQLWith: aParametersList	^self connection execute: (self sqlRequest format: aParametersList)! !!PgExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 6/8/2017 15:38'!extract	self subclassResponsibility ! !!PgExtractor methodsFor: 'accessing' stamp: 'OlivierAuverlot 6/8/2017 14:27'!connection	^ connection! !!PgExtractor methodsFor: 'accessing' stamp: 'OlivierAuverlot 6/8/2017 14:27'!connection: anObject	connection := anObject! !!PgExtractor methodsFor: 'accessing' stamp: 'OlivierAuverlot 6/8/2017 14:27'!database	^ database! !!PgExtractor methodsFor: 'accessing' stamp: 'OlivierAuverlot 6/8/2017 14:27'!database: anObject	database := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PgExtractor class	instanceVariableNames: ''!!PgExtractor class methodsFor: 'initialize' stamp: 'OlivierAuverlot 6/8/2017 14:28'!into: aDatabase with: aConnection	^self new 		database: aDatabase;		connection: aConnection;		extract;		yourself! !PgExtractor subclass: #PgClassExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgClassExtractor commentStamp: 'OlivierAuverlot 6/16/2017 11:41' prior: 0!I'm the generic extractor for defines objects in pg_class!!PgClassExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 11:53'!relkind	self subclassResponsibility ! !!PgClassExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 11:53'!sqlObjectClass	self subclassResponsibility ! !!PgClassExtractor methodsFor: 'actions' stamp: 'OlivierAuverlot 6/30/2017 13:46'!extract	self runSQL		do: [ :schema | 			self database				addObject:					(self sqlObjectClass 						oid: (schema atName: #oid)						name: (schema atName: #relname)						owner: self database						namespace: (self database schemaReferenceOf: (schema atName: #relnamespace) asInteger)) ]! !!PgClassExtractor methodsFor: 'sql' stamp: 'OlivierAuverlot 6/16/2017 11:57'!sqlRequest		^'SELECT oid,relname,relnamespace FROM pg_classWHERE 	relkind = ''{1}''AND relnamespace IN (	SELECT oid	FROM pg_namespace	WHERE nspname NOT IN	(''pg_toast'',''pg_temp_1'',''pg_toast_temp_1'',''pg_catalog'',''information_schema''))' format: { self relkind }! !PgExtractor subclass: #PgColumnExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgColumnExtractor commentStamp: 'OlivierAuverlot 6/8/2017 15:13' prior: 0!I'm the column extractor.!!PgColumnExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 15:03'!sqlRequest	^'SELECT 	oid,	attrelid,	attnum,	attname,	pg_type.oid as type_oid,	pg_type.typname,	attlen,	attndims,	attnotnull,	atthasdefFROM pg_attribute,pg_typeWHERE	atttypid = pg_type.oid	AND attnum > 0
	AND attrelid = {1}'! !!PgColumnExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 10:13'!extract	self database getTables do: [ :table |		(self runSQLWith: { table oid }) do: [ :result | 			| column dt |			column := SqlColumn oid: (result atName: 'oid') name: (result atName: #attname) owner: table.			column num: (result atName: 'attnum') asInteger.			column length: (result atName: 'attlen') asInteger.			column dimensions: (result atName: 'attndims') asInteger.			column isNotNull: (result atName: 'attnotnull').			column hasDefaultValue: (result atName: 'atthasdef').			dt := SqlDatatype oid: (result atName: 'type_oid') name: (result atName: 'typname')  owner: (self database).									column datatype: (self database addUniqueObject: dt).			self database addObject: column. 		].	].! !PgExtractor subclass: #PgConstraintExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgConstraintExtractor commentStamp: 'OlivierAuverlot 9/14/2017 15:48' prior: 0!I'm the constraints extractor. (to do)!!PgConstraintExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 9/15/2017 09:24'!sqlRequest! !!PgConstraintExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 9/15/2017 09:24'!extract! !PgExtractor subclass: #PgExtensionExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgExtensionExtractor commentStamp: 'OlivierAuverlot 6/23/2017 15:39' prior: 0!I'm the extension extractor.!!PgExtensionExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/23/2017 15:40'!sqlRequest	^'SELECT oid,extname FROM pg_extension'! !!PgExtensionExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 10:13'!extract	self runSQL do: [ :extension | 		self database addObject: (SqlExtension oid: (extension atName: #oid) name: (extension atName: #extname) owner: self database) 	].! !PgExtractor subclass: #PgFunctionExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgFunctionExtractor commentStamp: 'OlivierAuverlot 6/22/2017 13:38' prior: 0!I'm the function extractor.!!PgFunctionExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/22/2017 15:00'!sqlRequest	^'SELECT 	pg_proc.oid,	proname,	pronamespace,	pg_namespace.nspname as pronamespacename,	proargnames,	proargtypes,	prolang,	pg_language.lanname as prolangname,	prorettype,	pg_type.typname as prorettypename,	prosrcFROM 	pg_proc,pg_type,pg_language,pg_namespaceWHERE 	prorettype = pg_type.oidAND	 prolang = pg_language.oid AND	 pronamespace = pg_namespace.oidAND 	pronamespace IN (	SELECT oid	FROM pg_namespace	WHERE nspname NOT IN	(''pg_toast'',''pg_temp_1'',''pg_toast_temp_1'',''pg_catalog'',''information_schema''))'! !!PgFunctionExtractor methodsFor: 'shortcuts' stamp: 'OlivierAuverlot 6/23/2017 14:18'!getAllDatatypes	^self database postgresql datatypes! !!PgFunctionExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 10:13'!extract	self runSQL do: [ :func | 		| function resultType language namespace argnames argtypes |		((func atName: #prorettypename) = 'trigger') 			ifTrue: [  				function := SqlTriggerFunction oid: (func atName: #oid) name: (func atName: #proname) owner: self database.			] 			ifFalse: [				function := SqlFunction oid: (func atName: #oid) name: (func atName: #proname) owner: self database.				argnames := func atName: #proargnames.				argnames ifNotNil: [  					argtypes := ((func atName: #proargtypes) substrings: ' ') collect: [ :oid | oid asInteger ].					1 to: (argnames size) do: [ :i | 						| argname argtype |						argtype := self database addUniqueObject: (self getAllDatatypes detect: [ :datatype | datatype oid = (argtypes at: i) ]).						function addArgument: (SqlArgument name: (argnames at: i) datatype: argtype owner: function). 					]							]			].				function code: (func atName: 'prosrc').				language := (SqlLanguage oid: (func atName: #prolang) name: (func atName: #prolangname) owner: self database).		function language: (self database addUniqueObject: language).				namespace := (SqlNamespace oid: (func atName: #pronamespace) name: (func atName: #pronamespacename) owner: self database).		function namespace: (self database addUniqueObject: namespace).				resultType := SqlDatatype oid: (func atName: #prorettype) name: (func atName: #prorettypename)  owner: (self database).		function returnType: (self database addUniqueObject: resultType).				self database addObject: function.	].! !PgExtractor subclass: #PgInheritanceReferencesExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgInheritanceReferencesExtractor commentStamp: 'OlivierAuverlot 7/6/2017 10:28' prior: 0!I'm the inheritance references extractor.!!PgInheritanceReferencesExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 7/6/2017 10:32'!sqlRequest	^'select inhrelid,inhparent from pg_inherits'! !!PgInheritanceReferencesExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 11:18'!extract	self runSQL		do: [ :reference | 			| f t |			f := self database getTables select: [ :table | table oid = (reference atName: #inhrelid) asInteger ].			t := self database getTables select: [ :table | table oid = (reference atName: #inhparent) asInteger ].			self database addObject: (SqlInheritanceReference owner: self database from: f to: t) ]! !PgExtractor subclass: #PgLanguageExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgLanguageExtractor commentStamp: 'OlivierAuverlot 6/16/2017 15:21' prior: 0!I'm the language extractor.!!PgLanguageExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 10:33'!extract	self runSQL do: [ :language | 		self database addObject: (SqlLanguage oid: (language atName: #oid) name: (language atName: #lanname) owner: self database) 	]! !!PgLanguageExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 15:22'!sqlRequest	^'select oid,lanname from pg_language'! !PgClassExtractor subclass: #PgMaterializedViewExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgMaterializedViewExtractor commentStamp: 'OlivierAuverlot 6/16/2017 11:21' prior: 0!I'm the materialized View  extractor.!!PgMaterializedViewExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 13:27'!relkind	^'m'! !!PgMaterializedViewExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 7/6/2017 10:11'!sqlObjectClass	^SqlMaterializedView! !PgExtractor subclass: #PgNamespaceExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgNamespaceExtractor commentStamp: 'OlivierAuverlot 6/8/2017 14:05' prior: 0!I'm the schemas extractor.!!PgNamespaceExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 10:12'!extract	self runSQL do: [ :schema | 		self database addObject: (SqlNamespace oid: (schema atName: #oid) name: (schema atName: #nspname) owner: self database) 	].! !!PgNamespaceExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 10:29'!sqlRequest	^'SELECT oid,nspname	FROM pg_namespace	WHERE nspname NOT IN	(''pg_toast'',''pg_temp_1'',''pg_toast_temp_1'',''pg_catalog'',''information_schema'')'! !PgClassExtractor subclass: #PgSequenceExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgSequenceExtractor commentStamp: 'OlivierAuverlot 6/9/2017 14:19' prior: 0!I'm the sequences extractor.!!PgSequenceExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 13:29'!relkind	^'S'! !!PgSequenceExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 7/6/2017 10:11'!sqlObjectClass	^SqlSequence! !PgClassExtractor subclass: #PgTableExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgTableExtractor commentStamp: 'OlivierAuverlot 7/6/2017 11:40' prior: 0!I'm the tables extractor.Récupérer les clés primaire d'une tableSELECT a.attname, format_type(a.atttypid, a.atttypmod) AS data_typeFROM   pg_index iJOIN   pg_attribute a ON a.attrelid = i.indrelid                     AND a.attnum = ANY(i.indkey)WHERE  i.indrelid = 'tablename'::regclassAND    i.indisprimary;!!PgTableExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 11:55'!relkind	^'r'! !!PgTableExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 7/6/2017 10:11'!sqlObjectClass	^SqlTable! !PgExtractor subclass: #PgTriggerExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgTriggerExtractor commentStamp: 'OlivierAuverlot 6/29/2017 13:48' prior: 0!I'm the trigger extractor.!!PgTriggerExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/30/2017 14:21'!sqlRequest	^'SELECT 	oid,	tgrelid as table_oid,	tgname as triggername,	tgfoid as function_oid,	tgtype FROM pg_triggerWHERE tgisinternal = false'! !!PgTriggerExtractor methodsFor: 'action' stamp: 'OlivierAuverlot 7/6/2017 10:12'!extract	self runSQL do: [ :item |		| trigger |		trigger := (SqlTrigger oid: (item atName: #oid) name: (item atName: #triggername) owner: self database).		trigger table: ((self database getTables) detect: [ :t | t oid = (item atName: #table_oid) asInteger ]).		trigger function: ((self database getFunctions) detect: [ :f | f oid = (item atName: #function_oid) asInteger ] ifNone: [ nil ]).		trigger type: (item atName: #tgtype) asInteger.		self database addObject: trigger.	]! !PgClassExtractor subclass: #PgViewExtractor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-SQL-Extractors'!!PgViewExtractor commentStamp: 'OlivierAuverlot 6/8/2017 15:17' prior: 0!I'm the view extractor.!!PgViewExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 6/16/2017 13:27'!relkind	^'v'! !!PgViewExtractor methodsFor: 'parameters' stamp: 'OlivierAuverlot 7/6/2017 10:09'!sqlObjectClass	^SqlView! !!PgViewExtractor methodsFor: 'actions' stamp: 'OlivierAuverlot 6/23/2017 15:16'!extract	self runSQL		do: [ :schema | 			self database				addObject:					(self sqlObjectClass 						oid: ((schema atName: #oid) asInteger)						name: (schema atName: #relname)						owner: self database						namespace: (self database schemaReferenceOf: (schema atName: #relnamespace) asInteger)						definition: (schema atName: #definition)) ]! !!PgViewExtractor methodsFor: 'sql' stamp: 'OlivierAuverlot 6/23/2017 15:12'!sqlRequest	^'SELECT oid,relname,relnamespace,definitionFROM pg_class, pg_viewsWHERE 	relkind = ''{1}''AND relnamespace IN (	SELECT oid	FROM pg_namespace	WHERE nspname NOT IN	(''pg_toast'',''pg_temp_1'',''pg_toast_temp_1'',''pg_catalog'',''information_schema''))AND viewname = relname' format: { self relkind }! !
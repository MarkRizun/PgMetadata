TestCase subclass: #PgConnectionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-tests'!!PgConnectionTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/2/2017 15:31'!testConnectionString	| connection str |	connection := PgConnection hostname: 'localhost' port: 5432 database: 'db' user: 'john' password: 'doo'.	str := connection getConnectionString.		self assert: (str = 'postgresV2://localhost:5432/db?user=john&password=doo')! !TestCase subclass: #PgDatabaseTest	instanceVariableNames: 'db schema table colname colsurname colage'	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-tests'!!PgDatabaseTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	db:		<Object>    Implementation Points!!PgDatabaseTest methodsFor: 'initialization' stamp: 'OlivierAuverlot 7/6/2017 10:13'!setUp	| dt1 dt2 |	db := PgDatabase name: 'testdb'.	schema := SqlNamespace oid: 1 name: 'testschema' owner: db.	table := SqlTable oid: 2 name: 'testtable' owner: db.	db addObject: schema.	db addObject: table.	dt1 := SqlDatatype oid: 1000 name: 'character varying' owner: db.	colname := (SqlColumn oid: 3 name: 'name' owner: table).	colname datatype: (db addUniqueObject: dt1).	colname isNotNull: false.	colname length: 255.	db addObject: colname.		colsurname := (SqlColumn oid: 4 name: 'surname' owner: table).	colsurname datatype: (db addUniqueObject: dt1).	colsurname hasDefaultValue: nil.	colsurname isNotNull: true.	colsurname length: 255.	db addObject: colsurname.		dt2 := SqlDatatype oid: 1001 name: 'int2' owner: db.	colage := (SqlColumn oid: 5 name: 'age' owner: table).	colage datatype: (db addUniqueObject: dt2).	colage hasDefaultValue: 0.	colage isNotNull: true.	colage length: 255.	db addObject: colage.	! !!PgDatabaseTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/16/2017 15:50'!testDatatypeCount	self assert: (db getDatatypes size) = 2! !!PgDatabaseTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/16/2017 15:46'!testSchemaReferenceOf	self assert: (db schemaReferenceOf: 1) = schema! !TestCase subclass: #PgTriggerTest	instanceVariableNames: 'trigger'	classVariableNames: ''	poolDictionaries: ''	category: 'PgMetadata-tests'!!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:04'!testTypeStatement	self assert: (trigger isStatement = false).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:02'!testTypeBefore	self assert: (trigger isBefore).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:03'!testTypeUpdate	self assert: (trigger isUpdate).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:02'!testTypeDelete	self assert: (trigger isDelete = false).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:02'!testTypeInsert	self assert: (trigger isInsert).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:03'!testTypeTruncate	self assert: (trigger isTruncate = false).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:03'!testTypeInstead	self assert: (trigger isInstead = false).! !!PgTriggerTest methodsFor: 'tests' stamp: 'OlivierAuverlot 6/30/2017 15:02'!testTypeRow	self assert: (trigger isRow).! !!PgTriggerTest methodsFor: 'initialization' stamp: 'OlivierAuverlot 7/6/2017 10:12'!setUp	trigger := SqlTrigger oid: 255 name: 'test_trigger' owner: nil.	trigger type: 23.! !